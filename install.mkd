# installing gitolite

.@red<**NOTE 1**: if you're migrating from gitolite version 2.x, there are
some settings that MUST be dealt with **before** running `gitolite setup`;
please start [here][migr].  RTFM is *mandatory* for migrations.>@

.@red<**NOTE 2** This page is for an ssh-based setup.  For an http based setup
click [here][http].>@

----

This is the first step in using gitolite, and happens on the server.  It is
followed by [setup][], then [clone][].

----

## notes and naming conventions {#nnc}

<!-- pandoc: toc -->

Gitolite uses a single "real" (i.e., unix) user to provide secure access to
git repos to any number of "virtual" users, without giving them a shell.

The real user used is called the **hosting user**.  Typically this user is
*git*, and that is what we will use throughout the documentation.  However
RPMs and DEBs create a user called *gitolite* for this, so adjust instructions
and examples accordingly.

**Unless otherwise stated, everything in this page is to be done by logging in
as this "hosting user"**.

Notes:

  * Any unix user can be a hosting user.
  * Which also means you can have several hosting users on the same machine.
  * The URLs used will be of the form `git@host:reponame` (or its longer
    equivalent starting with `ssh://`).  The `.git` at the end is optional.  I
    recommend you leave it out, so your reponames are consistent with what the
    conf file uses.

## requirements {#req}

### your skills

  * If you're installing gitolite, you're a "system admin", like it or not.
    Since most people use the ssh mode, **[ssh][]** is therefore a necessary
    skill.  Please take the time to learn at least enough to get passwordless
    access working.

  * You also need to be somewhat familiar with git itself.  You cannot
    administer a whole bunch of git repositories if you don't know the basics
    of git.

  * Some familiarity with Unix and shells is probably required.

  * Regular expressions are a big part of gitolite in many places but
    familiarity is not necessary to do *basic* access control.

### server

  * Any Unix system with a posix compatible "sh" and a **sane** file system.
  * Git version 1.6.6 or later.  (Git 1.7.8 or later if you want to run the
    test suite).
  * Perl 5.8.8 or later.
  * Openssh (almost any version).  Optional if you're using [smart
    http][http].
  * A dedicated Unix userid to be the hosting user, usually "git" but it can
    be any user, even your own normal one.  (If you're using an RPM/DEB the
    install probably created one called "gitolite").

Also see the [WARNINGS][] page for important information of general use.

### client

  * Openssh client.
  * Git 1.6.6 or later.  Almost any git client will work, as long as it knows
    how to use ssh keys and send the right one along.

## getting the software

    git clone git://github.com/sitaramc/gitolite

(Do I need to mention that you can optionally check out a specific tag if you
wish, as long as it's not too old?)

## the actual install

**Note**: This section describes installing an ssh-based setup.  For smart
http setup click [here][http].

Gitolite has only one server side "command" now, much like git itself.  This
command is `gitolite`.  You don't need to place it anywhere special; worst
case you run it with the full path.

"Installation" consists of the following options:

1.  Keep the sources anywhere and use the full path to run the `gitolite`
    command.
2.  Keep the sources anywhere and symlink *just* the `gitolite` program to
    some directory on your `$PATH`.
3.  Copy the sources somewhere and use that path to run the `gitolite`
    command.

Option 2 is the best for general use.

There is a program called 'install' that helps you do these easily.  Assuming
your cloned the repo like this:

    git clone git://github.com/sitaramc/gitolite

you can run the 'install' command in 3 different ways:

    # option 1
    gitolite/install

    # option 2
    gitolite/install -ln
    # defaults to $HOME/bin (which is assumed to exist)
    #   ** or **
    # or use a specific directory (please supply full path):
    gitolite/install -ln /usr/local/bin

    # option 3
    # (again, please supply a full path)
    gitolite/install -to /usr/local/gitolite/bin

Creating a symlink doesn't need a separate program but 'install' also runs
`git describe` to create a VERSION file, which, trust me, is important!

**Next step**: run [**setup**][setup].

## upgrading

  * Update your clone of the gitolite source.
  * Repeat the install command you used earlier (make sure you use the same
    arguments as before).
  * Run `gitolite setup`.

## packaging gitolite {#package}

Gitolite has broad similarities to git in terms of packaging requirements.

  * Git has 150 executables to marshal and put somewhere.  Gitolite has the
    directories `commands`, `lib`, `syntactic-sugar`, `triggers`, and `VREF`.

    It doesn't matter what this directory is.  As an example, Fedora keeps
    git's 150 executables in /usr/libexec/git-core, so /usr/libexec/gitolite
    may be a good choice; it's upto you.

    *The rest of this section will assume you chose /usr/libexec/gitolite as
    the location, and that this location contains the 5 directories named
    above*.

  * Git has the `GIT_EXEC_PATH` env var to point to this directory.  Gitolite
    has `GL_BINDIR`.  However, in git, the "make" process embeds a suitable
    default into the binary, making the env var optional.

With that said, here's one way to package gitolite:

  * Put the executable `gitolite` somewhere in PATH.  Put the executable
    `gitolite-shell` in /usr/libexec/gitolite (along with those 5 directories).

    Change the 2 assignments to `$ENV{GL_BINDIR}`, one in 'gitolite', one in
    'gitolite-shell', to "/usr/libexec/gitolite" from `$FindBin::RealBin`.
    This is equivalent to "make" embedding the exec-path into the executable.

    **OR**

    Put both executables `gitolite` and `gitolite-shell` also into
    /usr/libexec/gitolite (i.e., as siblings to the 5 directories mentioned
    above).  Then *symlink* `/usr/libexec/gitolite/gitolite` to some directory
    in the PATH.  Do not *copy* it; it must be a symlink.

    Gitolite will find the exec-path by following the symlink.

  * The `Gitolite` subdirectory in `/usr/libexec/gitolite/lib` can stay right
    there, **OR**, if your distro policies don't allow that, can be put in any
    directory in perl's `@INC` path (such as `/usr/share/perl5/vendor_perl`).

  * Finally, a file called `/usr/libexec/gitolite/VERSION` must contain a
    suitable version string.
