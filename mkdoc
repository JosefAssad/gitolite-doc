#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;

# run from gitolite-doc as "./mkdoc"

# my $OUTDIR = "/tmp/doc2";
my $OUTDIR = "$ENV{HOME}/imli/tech/repos/sitaramc.github.com/gitolite";
unless (@ARGV) {
    system("rm     $OUTDIR/*.html");
    system("rm -rf $OUTDIR/images");
    system("mkdir  $OUTDIR/images");
}

# collect names of all markdown files
my @mkd = `find . -name "*.mkd" | sort`;
chomp(@mkd);

# if arguments were supplied, save them, else pretend all markdown files were supplied as arguments
my @argv = @ARGV;
@argv = @mkd unless @argv;

my $linkrefs = '';
my $base;
my %seen;

# first round runs through all markdown files, @mkd
@ARGV = @mkd;
while (<>) {
    unless ( $seen{$ARGV}++ ) {
        # on each change of file, compute the base name...
        $base = ( $ARGV =~ m(([^/]+)\.mkd) ? $1 : '' );
        # ...and add linkref to the first line if it's a header line
        if ( /^#/ and not( /{#\S+( .*?)?}/ or /^#+ #(\S+)/ ) ) {    # XXX last clause is transition code
            $linkrefs .= "\[$base\]: $base.html\n";
        }
    }

    # now add linkrefs for everything else
    if ( /^#+ .* \{#(\S+)( .*?)?\}/ or /^#+ #(\S+) / ) {            # XXX last clause is transition code
        $linkrefs .= "\[$1\]: $base.html\#$1\n";
    }
}

# second round runs through markdown files supplied as arguments
for (@argv) {
    m(([^/]+)\.mkd) or die "bad mkd file: '$_'";
    $base = $1;
    next if $base eq 'gitolite';                             # single page stuff needs different treatment

    open( my $mdp, "|-", "cat $_ - | md-pandoc html-N > $OUTDIR/$base.html" ) or die 1;
    print $mdp "\n" . $linkrefs;
    close $mdp;
}
say STDERR "----";
system("md-pandoc html-N < gitolite.mkd > $OUTDIR/gitolite.html");

# send manually created HTML pages and images
system("cp html/*.html $OUTDIR");
system("cp images/* $OUTDIR/images");
