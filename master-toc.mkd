# gitolite documentation

This is the master index for all gitolite documentation.  The sequence is
designed to go from background, to basics, to advanced, and then to more
advanced topics.

If you find this flow hard to follow, try these graphical overviews of the
documentation: [basic][] and [advanced][].

[basic]: basic.html
[advanced]: advanced.html

## [Introduction][index]

  * (for [older][g2] gitolite (v1 or v2) users)
  * [quick links][ql]
  * [what][] is gitolite?
  * [how][] does it work?
  * [why][] might you need it?
  * [who][] is using it?
  * [contact][] info, mailing list, IRC channel
  * [license][] info

## [WARNINGS][]

## help for [emergencies][]

  * **install/setup issues caused by [ssh][]**
  * [lost][lost-key] admin key/access
  * [bypass][]ing gitolite
  * [clean][]ing out a botched install
  * [common][ce] errors
  * [uncommon][ue] errors
  * [non-standard configs][nonstd] that'll trip you up
  * things that are [not gitolite problems][ngp]


## [testing][] gitolite
  * [trying][] out gitolite


## [quick][qi] install, setup, and clone


## [install][]

  * notes and naming conventions
  * [requirements][req]
      * your skills
      * server
      * client
  * getting the software
  * the actual install
  * upgrading
  * [packaging][package] gitolite
  * [migrating][migr] from v2

## [setup][]


## [clone][]
  * (appendix: administer gitolite directly on the server)


## gitolite [admin][]istration

  * ([server-side][server]) settings, hooks, etc.
      * ([link][WARNINGS]: important cautions on server side activity)
      * changing settings in the [rc][] file
      * installing custom [hooks][]
      * ([link][existing]: moving existing repos into gitolite)
  * ([client-side][adminrepo]) access control via the gitolite-admin repo
      * basic [syntax][] of the [conf][] file
          * include files
          * ([link][sugar]: syntactic sugar)
      * [groups][] (of users and repos)
          * special: '@all'
          * ([link][ldap]: getting user group info from LDAP)
      * adding and removing [users][]
          * [multiple keys][multi-key] per user
      * adding and removing [repos][]
          * renaming repos
      * defining access [rules][]
          * what does a rule look like?
          * when are the rules checked?
          * how are the rules matched?
          * summary of [permissions][permsum]
          * additional topics
              * [rule accumulation][rule-accum]
              * applying [deny rules][deny-rules] during the pre-git check
          * ([link][refex]: refexes)
          * ([link][write-types]: different types of write operations)
          * ([link][vref]: virtual refs)
      * gitolite [options][]
      * "[git config][git-config]" keys and values
      * ["wild"][wild] repos (user created repos)
          * quick introduction
          * (admin) declaring wild repos in the conf file
          * (user) [creating][create] a specific repo
          * repo patterns
          * roles
          * adding other roles
              * [IMPORTANT WARNING ABOUT THIS FEATURE][rolenamewarn]
          * listing wild repos
          * deleting wild repos

## what your [user][]s need to know


## [special][] features in core gitolite

**NOTE: [non-core][] features are listed in a [separate document][non-core]
since there are so many of them**.

  * putting 'repositories' and '.gitolite' [somewhere else][elsewhere]
  * [disabling pushes][writable] to take backups
  * [personal][pers] branches
  * [delegating][deleg] access control responsibilities
      * ([link][NAME]: the NAME VREF)
      * the [subconf][] command
  * using pubkeys obtained [from elsewhere][keysonly]
  * giving users [their own repos][gh]

## interfacing with [external][] tools

  * gitweb
      * setting owner, description, etc.
      * changing the [UMASK][umask]
  * git-daemon

## [mirroring][]


## [rare][]/one-time activities

  * moving [existing][] repos into gitolite
  * [moving][] servers

## customising gitolite

  * [customisation][cust] overview
      * [introduction][ncintro]
      * [where][ncloc] do you put custom code?
          * ([link][pushcode]: updating code via the admin repo)
      * [types][nctypes] of non-core programs
          * [commands][]
          * [hooks][]
          * syntactic [sugar][]
          * ([link][triggers]: triggers)
          * ([link][vref]: VREFs)

  * [developer notes][dev-notes] -- writing your own custom code
      * environment variables and other inputs
      * APIs
          * the shell API
          * the perl API
      * writing your own...
          * hooks
          * commands
          * trigger programs
          * sugar
      * appendices
          * notes on the INPUT trigger
          * [repo-specific environment variables][rsev]
          * [log file format][lff]

  * [list of non-core programs][non-core] shipped with gitolite

## background info

  * [files and directories][files] involved in install+setup
  * [auth][]entication versus authorisation
      * interfacing with [other authentication][otherauth] systems
      * getting user group info from [LDAP][ldap]
  * [ssh][]
  * [regular expressions][regex]
  * [gitolite performance][perf] and optional [caching][cache]

## contributed software, tools, and documentation

  * [emacs][README-emacs] "major mode"
  * (rest: TBD)

## TBD

  * log file format, LOG_EXTRA
  * hub
  * mob branches
  * password access
